2011-04-04  Jakub Jelinek  <jakub@redhat.com>

	* toplev.c (save_argv): New variable.
	(toplev_main): Initialize it.
	* graphite.c (init_cloog_pointers): Load libcloog.so.0 from gcc's private
	directory.

--- gcc/toplev.c.jj	2008-12-09 23:59:10.000000000 +0100
+++ gcc/toplev.c	2009-01-27 14:33:52.000000000 +0100
@@ -112,6 +112,8 @@ static bool no_backend;
 /* Length of line when printing switch values.  */
 #define MAX_LINE 75
 
+const char **save_argv;
+
 /* Decoded options, and number of such options.  */
 struct cl_decoded_option *save_decoded_options;
 unsigned int save_decoded_options_count;
@@ -1918,6 +1920,8 @@ toplev_main (int argc, char **argv)
 {
   expandargv (&argc, &argv);
 
+  save_argv = CONST_CAST2 (const char **, char **, argv);
+
   /* Initialization of GCC's environment, and diagnostics.  */
   general_init (argv[0]);
 
--- gcc/graphite.c.jj	2010-12-01 10:24:32.000000000 -0500
+++ gcc/graphite.c	2010-12-01 11:46:07.832118193 -0500
@@ -72,11 +72,39 @@ __typeof (cloog_pointers__) cloog_pointe
 static bool
 init_cloog_pointers (void)
 {
-  void *h;
-
-  if (cloog_pointers__.inited)
-    return cloog_pointers__.h != NULL;
-  h = dlopen ("libcloog.so.0", RTLD_LAZY);
+  void *h = NULL;
+  extern const char **save_argv;
+  char *buf, *p;
+  size_t len;
+
+  if (cloog_pointers__.inited)
+    return cloog_pointers__.h != NULL;
+  len = progname - save_argv[0];
+  buf = XALLOCAVAR (char, len + sizeof "libcloog.so.0");
+  memcpy (buf, save_argv[0], len);
+  strcpy (buf + len, "libcloog.so.0");
+  len += sizeof "libcloog.so.0";
+  p = strstr (buf, "/libexec/");
+  if (p != NULL)
+    {
+      while (1)
+	{
+	  char *q = strstr (p + 8, "/libexec/");
+	  if (q == NULL)
+	    break;
+	  p = q;
+	}
+      memmove (p + 4, p + 8, len - (p + 8 - buf));
+      h = dlopen (buf, RTLD_LAZY);
+      if (h == NULL)
+	{
+	  len = progname - save_argv[0];
+	  memcpy (buf, save_argv[0], len);
+	  strcpy (buf + len, "libcloog.so.0");
+	}
+    }
+  if (h == NULL)
+    h = dlopen (buf, RTLD_LAZY);
   cloog_pointers__.h = h;
   if (h == NULL)
     return false;
